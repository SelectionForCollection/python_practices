{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Практическое занятие №4\n",
    "\n",
    "П.Н. Советов, РТУ МИРЭА"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задача 1**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Реализуйте структуру данных хэш-таблицу, аналог встроенного `dict`. Используйте список пар ключ-значение. Примените тестирование на случайных данных с использованием `assert` и `dict`.\n",
    "\n",
    "1. Реализуйте методы чтения, записи, получения размера хэш-таблицы.\n",
    "1. Сделайте вышеупомянутые методы  операторами/функциями, по аналогии с `dict`.\n",
    "1. Реализуйте поддержку итератора для цикла `for`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задача 2**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Использование встроенных функций.\n",
    "\n",
    "1. Напишите код, который выведет на экране все переменные объекта произвольного пользовательского класса.\n",
    "1. Напишите код, который по имени метода, заданному строкой, вызовет этот метод в объекте некоторого пользовательского класса."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задача 3**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Рассмотрим следующее определение классов. Почему произошла ошибка?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "Cannot create a consistent method resolution\norder (MRO) for bases A, B",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32md:\\work\\mirea\\python\\docs\\pract4.ipynb Cell 8'\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      <a href='vscode-notebook-cell:/d%3A/work/mirea/python/docs/pract4.ipynb#ch0000032?line=3'>4</a>\u001b[0m \u001b[39mclass\u001b[39;00m \u001b[39mB\u001b[39;00m(A):\n\u001b[0;32m      <a href='vscode-notebook-cell:/d%3A/work/mirea/python/docs/pract4.ipynb#ch0000032?line=4'>5</a>\u001b[0m     \u001b[39mpass\u001b[39;00m\n\u001b[1;32m----> <a href='vscode-notebook-cell:/d%3A/work/mirea/python/docs/pract4.ipynb#ch0000032?line=6'>7</a>\u001b[0m \u001b[39mclass\u001b[39;00m \u001b[39mC\u001b[39;00m(A, B):\n\u001b[0;32m      <a href='vscode-notebook-cell:/d%3A/work/mirea/python/docs/pract4.ipynb#ch0000032?line=7'>8</a>\u001b[0m     \u001b[39mpass\u001b[39;00m\n",
      "\u001b[1;31mTypeError\u001b[0m: Cannot create a consistent method resolution\norder (MRO) for bases A, B"
     ]
    }
   ],
   "source": [
    "class A:\n",
    "    pass\n",
    "\n",
    "class B(A):\n",
    "    pass\n",
    "\n",
    "class C(A, B):\n",
    "    pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задача 4**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Работа с деревьями выражений.\n",
    "\n",
    "1. Реализовать классы Num, Add, Mul.\n",
    "1. Реализовать класс-посетитель PrintVisitor для печати выражения. Обойтись без операторов ветвления.\n",
    "1. Реализовать класс-посетитель CalcVisitor для вычисления выражения. Обойтись без операторов ветвления.\n",
    "1. Реализовать класс-посетитель StackVisitor для порождения кода стековой машины по выражению. Обойтись без операторов ветвления.\n",
    "1. Добавьте классы Sub и Mul. В существующий код можно только добавлять новые строки, не изменяя старой части.\n",
    "\n",
    "Пример:\n",
    "\n",
    "```Python\n",
    "ast = Add(Num(7), Mul(Num(3), Num(2)))\n",
    "pv = PrintVisitor()\n",
    "cv = CalcVisitor()\n",
    "sv = StackVisitor()\n",
    "print(pv.visit(ast))\n",
    "print(cv.visit(ast))\n",
    "sv.visit(ast)\n",
    "print(sv.get_code())\n",
    "```\n",
    "\n",
    "Результат:\n",
    "\n",
    "```\n",
    "(7 + (3 * 2))\n",
    "13\n",
    "PUSH 7\n",
    "PUSH 3\n",
    "PUSH 2\n",
    "MUL\n",
    "ADD\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задача 5**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Язык HTML-тегов с помощью менеджера контекста.\n",
    "\n",
    "Реализовать классы для выполнения следующего примера:\n",
    "\n",
    "```Python\n",
    "html = HTML()\n",
    "with html.body():\n",
    "    with html.div():\n",
    "        with html.div():\n",
    "            html.p('Первая строка.')\n",
    "            html.p('Вторая строка.')\n",
    "        with html.div():\n",
    "            html.p('Третья строка.')\n",
    "print(html.get_code())\n",
    "```\n",
    "\n",
    "Результат:\n",
    "\n",
    "```HTML\n",
    "<body>\n",
    "<div>\n",
    "<div>\n",
    "<p>Первая строка.</p>\n",
    "<p>Вторая строка.</p>\n",
    "</div>\n",
    "<div>\n",
    "<p>Третья строка.</p>\n",
    "</div>\n",
    "</div>\n",
    "</body>\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задача 6**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Изображение графа на основе физического моделирования.\n",
    "\n",
    "Начальный граф заменяется физической моделью с пружинами и одноименно заряженными частицами:\n",
    "1. Ребра заменяются моделью пружин, которые действуют согласно закону Гука. \n",
    "1. Между парами узлов, не связанными общим ребром-пружиной, действуют силы отталкивания.\n",
    "\n",
    "Логарифмический вариант \"закона Гука\":\n",
    "\n",
    "$$\\vec F_g(u, v) = \\mathrm{unit}(v - u) \\, c_1 \\log{\\frac{\\lVert u - v \\rVert}{c_2}}.$$\n",
    "\n",
    "\"Закон Кулона\":\n",
    "\n",
    "$$\\vec F_k(u, v) = \\mathrm{unit}(u - v) \\, \\frac{c_3}{{\\lVert u - v \\rVert}^2}.$$\n",
    "\n",
    "Сумма сил, действующих на $u$:\n",
    "\n",
    "$$\\vec F(u) = \\sum_{(u,v) \\in E} \\vec F_g(u, v) + \\sum_{(u,w) \\notin E} \\vec F_k(u, w).$$\n",
    "\n",
    "Здесь:\n",
    "* $u$, $v$, $w$ — радиус-векторы узлов графа,\n",
    "* unit — единичный вектор,\n",
    "* $c_2$ — длина \"пружины\" в состоянии покоя,\n",
    "* $c_1$, $c_3$, $c_4$ — другие константы.\n",
    "\n",
    "Для реализации модели потребуется два этапа вычислений.\n",
    "1. Пройти по всем узлам графа. Для каждого узла вычислить векторную сумму действующих на него сил.\n",
    "1. Еще раз пройти по всем узлам графа. Для каждого узла вычислить смещение радиус-вектора на суммарное значение силы, умноженное на $c_4$.\n",
    "\n",
    "Дополнительные подробности можно найти в [старой статье на английском языке](data/old-spring-paper.pdf)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пример работы программы:\n",
    "\n",
    "![](images/force.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Код-заготовка:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "from random import randint\n",
    "from tkinter import Tk, Canvas, Button\n",
    "\n",
    "CANVAS_WIDTH = 800\n",
    "CANVAS_HEIGHT = 600\n",
    "\n",
    "NODE_R = 15\n",
    "\n",
    "C1 = 2\n",
    "C2 = 50\n",
    "C3 = 20000\n",
    "C4 = 0.1\n",
    "\n",
    "DELAY = 10\n",
    "\n",
    "\n",
    "class Vec:\n",
    "    def __init__(self, x, y):\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "\n",
    "\n",
    "class Node:\n",
    "    def __init__(self, text):\n",
    "        self.text = text\n",
    "        self.targets = []\n",
    "        self.vec = Vec(0, 0)\n",
    "\n",
    "    def to(self, *nodes):\n",
    "        for n in nodes:\n",
    "            self.targets.append(n)\n",
    "            n.targets.append(self)\n",
    "        return self\n",
    "\n",
    "\n",
    "class Graph:\n",
    "    def __init__(self):\n",
    "        self.nodes = []\n",
    "\n",
    "    def add(self, text):\n",
    "        self.nodes.append(Node(text))\n",
    "        return self.nodes[-1]\n",
    "\n",
    "\n",
    "class GUI:\n",
    "    def __init__(self, root):\n",
    "        self.canvas = Canvas(root, width=CANVAS_WIDTH,\n",
    "                             height=CANVAS_HEIGHT, bg=\"white\")\n",
    "        self.draw_button = Button(root, text=\"Draw\", command=self.start_draw)\n",
    "        self.canvas.pack()\n",
    "        self.draw_button.pack()\n",
    "        self.nodes = None\n",
    "        self.busy = None\n",
    "\n",
    "    def draw_node(self, x, y, text, r=NODE_R):\n",
    "        self.canvas.create_oval(x - r, y - r, x + r, y + r, fill=\"MistyRose2\")\n",
    "        self.canvas.create_text(x, y, text=text)\n",
    "\n",
    "    def draw_graph(self):\n",
    "        for n in self.nodes:\n",
    "            for t in n.targets:\n",
    "                self.canvas.create_line(n.vec.x, n.vec.y, t.vec.x, t.vec.y)\n",
    "        for n in self.nodes:\n",
    "            self.draw_node(n.vec.x, n.vec.y, n.text)\n",
    "\n",
    "    def start_draw(self):\n",
    "        self.canvas.delete(\"all\")\n",
    "        if self.busy:\n",
    "            root.after_cancel(self.busy)\n",
    "        random_layout(self.nodes)\n",
    "        self.animate()\n",
    "\n",
    "    def animate(self):\n",
    "        self.canvas.delete(\"all\")\n",
    "        for _ in range(DELAY):\n",
    "            force_layout(self.nodes)\n",
    "        self.draw_graph()\n",
    "        self.busy = root.after(5, self.animate)\n",
    "\n",
    "\n",
    "def random_layout(nodes):\n",
    "    for n in nodes:\n",
    "        n.vec.x = randint(NODE_R * 4, CANVAS_WIDTH - NODE_R * 4 - 1)\n",
    "        n.vec.y = randint(NODE_R * 4, CANVAS_HEIGHT - NODE_R * 4 - 1)\n",
    "\n",
    "\n",
    "def f_spring(u, v):\n",
    "    pass  # TODO\n",
    "\n",
    "\n",
    "def f_ball(u, v):\n",
    "    pass  # TODO\n",
    "\n",
    "\n",
    "def force_layout(nodes):\n",
    "    forces = {}\n",
    "    for n in nodes:\n",
    "        pass  # TODO\n",
    "\n",
    "\n",
    "g = Graph()\n",
    "n1 = g.add(\"1\")\n",
    "n2 = g.add(\"2\")\n",
    "n3 = g.add(\"3\")\n",
    "n4 = g.add(\"4\")\n",
    "n5 = g.add(\"5\")\n",
    "n6 = g.add(\"6\")\n",
    "n7 = g.add(\"7\")\n",
    "n1.to(n2, n3, n4, n5)\n",
    "n2.to(n5)\n",
    "n3.to(n2, n4)\n",
    "n6.to(n4, n1, n7)\n",
    "n7.to(n5, n1)\n",
    "\n",
    "root = Tk()\n",
    "w = GUI(root)\n",
    "w.nodes = g.nodes\n",
    "root.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задача 7**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Восходящий алгоритм [иерархической кластеризации](https://neerc.ifmo.ru/wiki/index.php?title=%D0%98%D0%B5%D1%80%D0%B0%D1%80%D1%85%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%BA%D0%BB%D0%B0%D1%81%D1%82%D0%B5%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F) в наивной, неоптимизированной форме.\n",
    "\n",
    "1. Использовать коэффициент Жаккара.\n",
    "1. Использовать расстояние дальнего соседа (complete linkage). \n",
    "1. Оценить работу алгоритма на данных `data/langs.csv` (языки программирования) и `data/zoo.csv` (животные).\n",
    "1. Сделать вывод в формате graphviz.\n",
    "\n",
    "Код-заготовка:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "\n",
    "\n",
    "def load_csv(filename):\n",
    "    text = Path(filename).read_text().strip()\n",
    "    rows = []\n",
    "    for line in text.split('\\n')[1:]:\n",
    "        rows.append(line.split(';'))\n",
    "    return rows\n",
    "\n",
    "\n",
    "class Cluster:\n",
    "    def __init__(self, data, left=None, right=None):\n",
    "        self.data = data\n",
    "        self.left = left\n",
    "        self.right = right\n",
    "\n",
    "\n",
    "def jaccard_dist(row1, row2):\n",
    "    pass  # TODO\n",
    "\n",
    "\n",
    "def cluster_dist(func, data1, data2):\n",
    "    pass  # TODO\n",
    "\n",
    "\n",
    "def hclust(rows):\n",
    "    clusters = [Cluster([row]) for row in rows]\n",
    "    while len(clusters) > 1:\n",
    "        pass  # TODO\n",
    "    return clusters[0]\n",
    "\n",
    "\n",
    "def gen_dot(cluster, min_dist):\n",
    "    pass  # TODO\n",
    "\n",
    "\n",
    "rows = load_csv('data/langs.csv')\n",
    "#cluster = hclust(rows)\n",
    "#print(gen_dot(cluster, 0.5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Задача 8**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Визуализатор AGI-графики из старых компьютерных игр комании Sierra.\n",
    "\n",
    "В старых играх от Sierra (например, в [King's Quest](https://www.mobygames.com/game/kings-quest) 1984 года) фоновая графика была представлена в виде последовательности [команд](https://wiki.scummvm.org/index.php?title=AGI/Specifications/Pic). В целом, результат очень напоминал векторную графику. В оригинале использовалось разрешение 160x200 пикселей, но можно попробовать перерисовать картинки из King's Quest в высоком разрешении.\n",
    "\n",
    "1. Реализуйте разбор команд из граф. файлов в каталоге `data/pic.*`.\n",
    "2. Нарисуйте средствами `tkinter` результат в высоком разрешении без заливки экрана. Учитывайте, что игре используется 2 типа экранов: обычный и экран приоритетов.\n",
    "3. (повышенной сложности) Придумайте способ добавить корректную цветовую заливку областей экрана.\n",
    "\n",
    "Заготовка:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "import tkinter as tk\n",
    "\n",
    "SCALE_X = 6\n",
    "SCALE_Y = 4\n",
    "\n",
    "COLORS = [\n",
    "    (0, 0, 0),\n",
    "    (0, 0, 168),\n",
    "    (0, 168, 0),\n",
    "    (0, 168, 168),\n",
    "    (168, 0, 0),\n",
    "    (168, 0, 168),\n",
    "    (168, 84, 0),\n",
    "    (168, 168, 168),\n",
    "    (84, 84, 84),\n",
    "    (84, 84, 252),\n",
    "    (84, 252, 84),\n",
    "    (84, 252, 252),\n",
    "    (252, 84, 84),\n",
    "    (252, 84, 252),\n",
    "    (252, 252, 84),\n",
    "    (252, 252, 252)\n",
    "]\n",
    "\n",
    "\n",
    "def draw_line(coords, color_index):\n",
    "    canvas.create_line(*[(x * SCALE_X, y * SCALE_Y) for x, y in coords],\n",
    "                       fill='#%02x%02x%02x' % COLORS[color_index], width=4)\n",
    "\n",
    "\n",
    "def draw(pic):\n",
    "    pass  # TODO\n",
    "\n",
    "\n",
    "pic = Path('data/PIC.1').read_bytes()\n",
    "canvas = tk.Canvas(width=160 * SCALE_X, height=170 * SCALE_Y)\n",
    "canvas.pack()\n",
    "draw(pic)\n",
    "tk.mainloop()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пример работы программы:\n",
    "\n",
    "![](images/pic1.png)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
